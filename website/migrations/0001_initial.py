# Generated by Django 5.1.3 on 2024-11-20 22:10

import django.db.models.deletion
import modelcluster.fields
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("wagtailcore", "0094_alter_page_locale"),
        ("wagtailimages", "0027_image_description"),
    ]

    operations = [
        migrations.CreateModel(
            name="BlogRollPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("blog_description", models.CharField(max_length=255)),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="HomePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "content",
                    wagtail.fields.StreamField(
                        [("hero", 11), ("now_playing", 13)],
                        blank=True,
                        block_lookup={
                            0: ("wagtail.blocks.CharBlock", (), {"required": True}),
                            1: ("wagtail.blocks.CharBlock", (), {"required": False}),
                            2: (
                                "wagtail.images.blocks.ImageChooserBlock",
                                (),
                                {"required": False},
                            ),
                            3: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": "Call-to-action text",
                                    "required": False,
                                    "verbose_name": "Call-to-action text",
                                },
                            ),
                            4: (
                                "wagtail.blocks.PageChooserBlock",
                                (),
                                {
                                    "help_text": "Link to a page",
                                    "required": False,
                                    "verbose_name": "Call-to-action Page link",
                                },
                            ),
                            5: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "choices": [
                                        ("Read More", "Read More"),
                                        ("Learn More", "Learn More"),
                                    ],
                                    "help_text": "Choose link text",
                                    "required": False,
                                    "verbose_name": "Call-to-action Link text",
                                },
                            ),
                            6: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("cta_text", 3),
                                        ("cta_page_link", 4),
                                        ("cta_link_text", 5),
                                    ]
                                ],
                                {"required": False},
                            ),
                            7: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"help_text": "", "required": False},
                            ),
                            8: (
                                "wagtail.blocks.PageChooserBlock",
                                (),
                                {"required": False},
                            ),
                            9: (
                                "wagtail.blocks.StructBlock",
                                [[("text", 7), ("page_link", 8)]],
                                {"label": "Primary Button", "required": False},
                            ),
                            10: (
                                "wagtail.blocks.StructBlock",
                                [[("text", 7), ("page_link", 8)]],
                                {"label": "Secondary Button", "required": False},
                            ),
                            11: (
                                "wagtail.blocks.StructBlock",
                                [
                                    [
                                        ("header_text", 0),
                                        ("sub_header_text", 1),
                                        ("background_image", 2),
                                        ("cta", 6),
                                        ("primary_button", 9),
                                        ("secondary_button", 10),
                                    ]
                                ],
                                {},
                            ),
                            12: ("wagtail.blocks.CharBlock", (), {}),
                            13: (
                                "wagtail.blocks.StructBlock",
                                [[("heading", 12), ("block_text", 12)]],
                                {},
                            ),
                        },
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="Theater",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("capacity", models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="BlogAuthor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=65)),
                ("last_name", models.CharField(max_length=65)),
                ("sites", models.ManyToManyField(to="wagtailcore.site")),
            ],
            options={
                "ordering": ("last_name", "first_name"),
            },
        ),
        migrations.CreateModel(
            name="BlogPostPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("body", wagtail.fields.RichTextField()),
                ("published_date", models.DateField(blank=True, null=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="posts",
                        to="website.blogauthor",
                    ),
                ),
                (
                    "banner_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="Film",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "duration",
                    models.PositiveIntegerField(help_text="Duration in minutes"),
                ),
                (
                    "rating",
                    models.CharField(
                        blank=True, help_text="e.g., PG, R", max_length=10, null=True
                    ),
                ),
                ("release_date", models.DateField(blank=True, null=True)),
                ("imdb_link", models.URLField(blank=True, null=True)),
                ("youtube_link", models.URLField(blank=True, null=True)),
                (
                    "poster",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Schedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("confirmed", models.BooleanField(default=False)),
                (
                    "movie",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="schedules",
                        to="website.film",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MovieReviewPost",
            fields=[
                (
                    "blogpostpage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="website.blogpostpage",
                    ),
                ),
                (
                    "movie",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="reviews",
                        to="website.film",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("website.blogpostpage",),
        ),
        migrations.CreateModel(
            name="ShowTime",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_time", models.DateTimeField()),
                ("is_sold_out", models.BooleanField(default=False)),
                ("cancelled", models.BooleanField(default=False)),
                (
                    "schedule",
                    modelcluster.fields.ParentalKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="showtimes",
                        to="website.schedule",
                    ),
                ),
                (
                    "theater",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="showtimes",
                        to="website.theater",
                    ),
                ),
            ],
            options={
                "ordering": ["start_time"],
                "constraints": [
                    models.UniqueConstraint(
                        fields=("theater", "start_time"),
                        name="unique_showtime_per_theater",
                    )
                ],
            },
        ),
    ]
